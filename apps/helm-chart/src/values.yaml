## Graphoenix configuration
## Ref: https://github.com/clementguillot/graphoenix
##

# -- Provide a name in place of `graphoenix`
nameOverride: graphoenix
# -- String to fully override `"graphoenix.fullname"`
fullnameOverride: ""

## Globally shared configuration
global:
  # -- Default domain used by all components
  domain: https://graphoenix.example.com

  # -- Common labels for the all resources
  additionalLabels: {}
    # app: graphoenix

  # -- Number of old deployment ReplicaSets to retain. The rest will be garbage collected.
  revisionHistoryLimit: 3

  # Default image used by all components
  image:
    # -- Overrides the global Graphoenix image tag whose default is the chart appVersion
    tag: ""
    # -- If defined, a imagePullPolicy applied to all Graphoenix deployments
    imagePullPolicy: IfNotPresent

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Annotations for the all deployed Deployments
  deploymentAnnotations: {}

  # -- Annotations for the all deployed Cron Jobs
  cronJobAnnotations: {}

  # -- Annotations for the all deployed pods
  podAnnotations: {}

  # -- Labels for the all deployed pods
  podLabels: {}

  # -- Toggle and define pod-level security context.
  # @default -- `{}` (See [values.yaml])
  securityContext: {}
  #  runAsUser: 999
  #  runAsGroup: 999
  #  fsGroup: 999

  # -- Default node selector for all components
  nodeSelector: {}

  # -- Default tolerations for all components
  tolerations: []

  # Default affinity preset for all components
  affinity:
    # -- Default pod anti-affinity rules. Either: `none`, `soft` or `hard`
    podAntiAffinity: soft
    # Node affinity rules
    nodeAffinity:
      # -- Default node affinity rules. Either: `none`, `soft` or `hard`
      type: hard
      # -- Default match expressions for node affinity
      matchExpressions: []
        # - key: topology.kubernetes.io/zone
        #   operator: In
        #   values:
        #    - antarctica-east1
        #    - antarctica-west1

  # -- Deployment strategy for the all deployed Deployments
  deploymentStrategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # -- Environment variables to pass to all deployed Deployments
  env: []

## Server
server:
  # -- Graphoenix server name string
  name: server

  # -- The number of server pods to run
  replicas: 1

  ## Graphoenix server image
  image:
    # -- Repository to use for the Graphoenix server
    repository: ghcr.io/clementguillot/graphoenix-server
    # -- Tag to use for the Graphoenix server
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the Graphoenix server
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  # @default -- `[]` (defaults to global.imagePullSecrets)
  imagePullSecrets: []

  # -- DB configuration when using external MongoDB
  database:
    # @default -- `""` (defaults to server.name=server)
    dbName: ""
    # @default -- `""` (defaults to mongodb.enabled=true)
    connectionStringSecretName: ""
    # @default -- `""` (defaults to mongodb.enabled=true)
    connectionStringSecretKeyRef: ""

  # -- Additional command line arguments to pass to Graphoenix server
  extraArgs: []

  # -- Environment variables to pass to Graphoenix server
  env: []

  # -- envFrom to pass to Graphoenix server
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Annotations to be added to server Deployment
  deploymentAnnotations: {}

  # -- Annotations to be added to server Cron Jobs
  cronJobAnnotations: {}

  # -- Annotations to be added to server pods
  podAnnotations: {}

  # -- Labels to be added to server pods
  podLabels: {}

  # -- Resource limits and requests for the Graphoenix server
  resources: {}
  #  limits:
  #    cpu: 500m
  #    memory: 512Mi
  #  requests:
  #    cpu: 250m
  #    memory: 256Mi

  # Server container ports
  containerPorts:
    # -- Server container port
    server: 8080

  # -- Graphoenix server container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL
  # -- terminationGracePeriodSeconds for container lifecycle hook
  terminationGracePeriodSeconds: 30

  # -- [Node selector]
  # @default -- `{}` (defaults to global.nodeSelector)
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  # @default -- `[]` (defaults to global.tolerations)
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to global.affinity preset)
  affinity: {}

  # -- Deployment strategy to be added to the server Deployment
  deploymentStrategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  ## Server service configuration
  service:
    # -- Server service annotations
    annotations: {}
    # -- Server service labels
    labels: {}
    # -- Server service type
    type: ClusterIP
    # -- Server service http port
    servicePortHttp: 80
    # -- Server service http port name, can be used to route traffic via istio
    servicePortHttpName: http

  ## Graphoenix server emptyDir volumes
  emptyDir:
    # -- EmptyDir size limit for the Argo CD server
    # @default -- `""` (defaults not set if not specified i.e. no size limit)
    sizeLimit: ""
    # sizeLimit: "1Gi"

  ## Server clean-up cron job configuration
  cleanup:
    # -- Server clean-up enabled
    enabled: true
    # -- Server clean-up cron schedule expression
    schedule: 0 0 * * *
    # -- Server clean-up successful jobs history limit
    successfulJobsHistoryLimit: 5
    # -- Server clean-up failed jobs history limit
    failedJobsHistoryLimit: 5
    # -- Server clean-up active deadline seconds
    activeDeadlineSeconds: 300
    # -- Server clean-up concurrent policy
    concurrencyPolicy: Forbid
    #-- Server clean-up concurrency
    concurrency: 1
    # -- Server clean-up numbers of days to truncate on
    days: 30

## Console
console:
  # -- Graphoenix console name string
  name: console

  # -- The number of console pods to run
  replicas: 1

  ## Graphoenix server image
  image:
    # -- Repository to use for the Graphoenix console
    repository: ghcr.io/clementguillot/graphoenix-console
    # -- Tag to use for the Graphoenix console
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the Graphoenix console
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  # @default -- `[]` (defaults to global.imagePullSecrets)
  imagePullSecrets: []

  # -- Additional command line arguments to pass to Graphoenix console
  extraArgs: []

  # -- Environment variables to pass to Graphoenix console
  env: []

  # -- envFrom to pass to Graphoenix console
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Annotations to be added to console Deployment
  deploymentAnnotations: {}

  # -- Annotations to be added to console pods
  podAnnotations: {}

  # -- Labels to be added to console pods
  podLabels: {}

  # -- Resource limits and requests for the Graphoenix console
  resources: {}
  #  limits:
  #    cpu: 500m
  #    memory: 512Mi
  #  requests:
  #    cpu: 250m
  #    memory: 256Mi

  # Console container ports
  containerPorts:
    # -- Console container port
    console: 3000

  # -- Graphoenix console container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL
  # -- terminationGracePeriodSeconds for container lifecycle hook
  terminationGracePeriodSeconds: 30

  # -- [Node selector]
  # @default -- `{}` (defaults to global.nodeSelector)
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  # @default -- `[]` (defaults to global.tolerations)
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to global.affinity preset)
  affinity: {}

  # -- Deployment strategy to be added to the console Deployment
  deploymentStrategy:
    {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
  #   maxUnavailable: 25%

  ## Console service configuration
  service:
    # -- Console service annotations
    annotations: {}
    # -- Console service labels
    labels: {}
    # -- Console service type
    type: ClusterIP
    # -- Console service http port
    servicePortHttp: 80
    # -- Console service http port name, can be used to route traffic via istio
    servicePortHttpName: http

  ## Graphoenix console emptyDir volumes
  emptyDir:
    # -- EmptyDir size limit for the Argo CD server
    # @default -- `""` (defaults not set if not specified i.e. no size limit)
    sizeLimit: ""
    # sizeLimit: "1Gi"

## Embedded MinIO configuration (Bitnami Helm Chart)
minio:
  # If `enabled`, Bitnami's chart is installed.
  enabled: true

  # Comma, semi-colon or space separated list of buckets to create at initialization (only in standalone mode)
  defaultBuckets: "graphoenix"

## Embedded MongoDB configuration (Bitnami Helm Chart)
mongodb:
  # If `enabled`, Bitnami's chart is installed.
  enabled: true

  # MANDATORY: set this value to `replicaset` to use MongoDB transactions
  architecture: replicaset

  # Default credentials
  auth:
    databases:
      - server
    usernames:
      - server
    passwords:
      - server

  serviceBindings:
    # MANDATORY: enable this "experimental" feature to create a secret for service binding
    enabled: true

  initdbScripts:
    grant-role-to-server.js: |
      use server
      db.grantRolesToUser(
        "server",
        [
          { role: "dbAdmin", db: "server" }
        ],
        { w: "majority", wtimeout: 5000 }
      );

## Embedded NGINX configuration (Bitnami Helm Chart)
nginx:
  # If `enabled`, Bitnami's chart is installed.
  enabled: true

  # NGINX Service properties
  service:
    # Service type
    type: ClusterIP
    # Service HTTP port
    ports:
      http: 80

  # ConfigMap with custom server block to be added to NGINX configuration
  existingServerBlockConfigmap: '{{ template "graphoenix.fullname" . }}'

  # Configuration to add to NGINX server block
  extraServerBlockConfiguration: ""

  customReadinessProbe:
    httpGet:
      path: /healthz
      port: http
      scheme: HTTP
